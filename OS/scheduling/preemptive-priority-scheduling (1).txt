#include <stdio.h>
void main() {
    int n, i, j;
    int pid[100], at[100], bt[100], priority[100], remaining_bt[100];
    int ct[100], tt[100], wt[100];
    int completed = 0, current_time = 0;
    int total_tt = 0, total_wt = 0;
    float avg_tt = 0, avg_wt = 0;
    
    printf("ENTER THE NUMBER OF PROCESSES: ");
    scanf("%d", &n);
    
    for(i = 0; i < n; i++) {
        printf("%d ENTER THE PROCESSES_ID: ", i+1);
        scanf("%d", &pid[i]);
        printf("   ENTER THE ARRIVAL TIME: ");
        scanf("%d", &at[i]);
        printf("   ENTER THE BURST TIME: ");
        scanf("%d", &bt[i]);
        printf("   ENTER THE PRIORITY (lower value = higher priority): ");
        scanf("%d", &priority[i]);
        remaining_bt[i] = bt[i];
    }
    
    int gantt_pid[1000], gantt_start[1000], gantt_count = 0;
    int is_completed[100] = {0};
    
    while(completed != n) {
        int highest_priority = 9999;
        int selected_process = -1;
        
        // Find the process with highest priority among arrived processes
        for(i = 0; i < n; i++) {
            if(at[i] <= current_time && is_completed[i] == 0) {
                if(priority[i] < highest_priority) {
                    highest_priority = priority[i];
                    selected_process = i;
                }
                else if(priority[i] == highest_priority) {
                    // If priority is same, select the one that arrived earlier
                    if(at[i] < at[selected_process]) {
                        selected_process = i;
                    }
                }
            }
        }
        
        if(selected_process == -1) {
            // No process available at current time, find next arrival
            int next_arrival_time = 9999;
            for(i = 0; i < n; i++) {
                if(is_completed[i] == 0 && at[i] < next_arrival_time) {
                    next_arrival_time = at[i];
                }
            }
            
            // Record idle time in Gantt chart
            gantt_pid[gantt_count] = -1;  // -1 represents idle
            gantt_start[gantt_count] = current_time;
            gantt_count++;
            
            current_time = next_arrival_time;
        } 
        else {
            // Check if we need to start a new block in the Gantt chart
            if(gantt_count == 0 || gantt_pid[gantt_count-1] != pid[selected_process]) {
                gantt_pid[gantt_count] = pid[selected_process];
                gantt_start[gantt_count] = current_time;
                gantt_count++;
            }
            
            // Execute the process for 1 time unit
            remaining_bt[selected_process]--;
            current_time++;
            
            // Check if the process has completed
            if(remaining_bt[selected_process] == 0) {
                completed++;
                is_completed[selected_process] = 1;
                ct[selected_process] = current_time;
                tt[selected_process] = ct[selected_process] - at[selected_process];
                wt[selected_process] = tt[selected_process] - bt[selected_process];
            }
        }
    }
    
    // Calculate average turnaround time and waiting time
    for(i = 0; i < n; i++) {
        total_tt += tt[i];
        total_wt += wt[i];
    }
    
    avg_tt = (float)total_tt / n;
    avg_wt = (float)total_wt / n;
    
    // Display results
    printf("\n AVERAGE TURNAROUND TIME: %f", avg_tt);
    printf("\n AVERAGE WAITING TIME: %f", avg_wt);
    
    // Process table
    printf("\n|   PID |   AT  |   BT  | Priority |   CT  |   TT  |   WT  |");
    for(i = 0; i < n; i++) {
        printf("\n|   %d  |   %d  |   %d  |    %d    |   %d  |   %d  |   %d  |", 
               pid[i], at[i], bt[i], priority[i], ct[i], tt[i], wt[i]);
    }
    
    // Gantt chart
    printf("\n\nGantt Chart:");
    printf("\n|");
    for(i = 0; i < gantt_count; i++) {
        if(gantt_pid[i] == -1) {
            printf("idle|");
        } else {
            printf(" %d |", gantt_pid[i]);
        }
    }
    
    // Timestamp
    printf("\n");
    for(i = 0; i < gantt_count; i++) {
        printf("%d", gantt_start[i]);
    }
    printf("%d", current_time);
    printf("\n");
}
